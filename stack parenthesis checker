class Solution
{
    //Function to check if brackets are balanced or not.
    static boolean ispar(String x)
    {
    //     // add your code here
    //   Stack<Character> s = new Stack<Character>();
        
    //     for(int i=0;i<x.length();i++)
    //     {
    //         if(x.charAt(i) == '(' || x.charAt(i) == '{' || x.charAt(i) == '[')
    //         {
    //             s.push(x.charAt(i));
    //         }
    //         else
    //         {
    //             if(s.isEmpty())
    //             {
    //                 return false;
    //             }
    //             // else if ((ch == ')' && s.top()== "(" )
    //             // s.pop();
                
    //             // else if(ch == "}" && s.top() == "{")
    //             // s.pop();
                
                
                
    //             {
    //                 if((x.charAt(i) == ')' && s.top()== '(' ) || (x.charAt(i) == '}' && s.top() == "{") ||(x.charAt(i) == "]" && s.top() == "["))
    //                 s.pop();
    //             }
    //         }
    //     }
    //     if(s.isEmpty())
    //     return true;
        
    //     else 
    //     return false;
    
    Stack<Character> st = new Stack<Character>();
        
        for(int i = 0; i < x.length(); i++) {
            
            char ch = x.charAt(i);
            
            if(ch == '(' || ch == '{' || ch == '[')
                st.push(ch);
            else if(st.empty())
                return false;
            else {
                if(ch == ')' && st.peek() == '(')
                    st.pop();
                else if(ch == '}' && st.peek() == '{')
                    st.pop();
                else if(ch == ']' && st.peek() == '[')
                    st.pop();
                else
                    return false;
            }
        }
        
        if(st.size() == 0)
            return true;
        
        return false;
    }
    }

